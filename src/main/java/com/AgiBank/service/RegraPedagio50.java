package com.AgiBank.service;

import com.AgiBank.model.Contribuicao;
import com.AgiBank.model.Usuario;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;

public class RegraPedagio50 {

    private static final LocalDate DATA_CORTE_1994 = LocalDate.of(1994, 7, 1);
    private static final LocalDate DATA_REFORMA = LocalDate.of(2019, 11, 13);
    private static final double ALIQUOTA_FIXA = 0.31; // 31% fixo do c√°lculo previdenci√°rio
    private ElegibilidadeService elegibilidadeService;

    public RegraPedagio50(ElegibilidadeService elegibilidadeService) {
        this.elegibilidadeService = elegibilidadeService;
    }

    public double calcularAposentadoria(Usuario usuario, List<Contribuicao> contribuicoes, double expectativaVida) {
        // 1Ô∏è‚É£ Verificar se o usu√°rio √© eleg√≠vel para o Ped√°gio 50%
        if (!isElegivelPedagio50(usuario, contribuicoes)) {
            return 0; // ‚ùå Se n√£o for eleg√≠vel, n√£o pode se aposentar pelo Ped√°gio 50%
        }

        // 2Ô∏è‚É£ Calcular o tempo total de contribui√ß√£o at√© a reforma de 2019
        int mesesContribuidosAteReforma = calcularMesesContribuidosAteData(contribuicoes, DATA_REFORMA);
        int anosContribuidosAteReforma = mesesContribuidosAteReforma / 12;

        // 3Ô∏è‚É£ Descobrir quanto tempo faltava para a aposentadoria m√≠nima na √©poca (35 anos para homens, 30 para mulheres)
        int minimoContribuicao = (usuario.getGenero() == Usuario.Genero.MASCULINO) ? 35 : 30;
        int anosFaltando = minimoContribuicao - anosContribuidosAteReforma;

        if (anosFaltando <= 0) {
            return 0; // ‚ùå Se j√° atingiu o m√≠nimo, n√£o precisa do ped√°gio.
        }

        // 4Ô∏è‚É£ Calcular o Ped√°gio (50% do tempo faltando)
        int anosPedagio = (int) Math.ceil(anosFaltando * 1.5); // Ped√°gio de 50% a mais do que faltava
        int totalAnosContribuidos = anosContribuidosAteReforma + anosPedagio;

        // 5Ô∏è‚É£ Calcular a m√©dia das contribui√ß√µes desde 1994
        double mediaSalarial = calcularMediaContribuicoesDesde1994(contribuicoes);

        // 6Ô∏è‚É£ Calcular o Fator Previdenci√°rio (FP)
        double fatorPrevidenciario = calcularFatorPrevidenciario(totalAnosContribuidos, expectativaVida);

        // 7Ô∏è‚É£ Calcular o valor final da aposentadoria
        double valorAposentadoria = mediaSalarial * fatorPrevidenciario;

        return valorAposentadoria;
    }

    /**
     * Verifica se o usu√°rio √© eleg√≠vel para o Ped√°gio 50%.
     */
    public boolean isElegivelPedagio50(Usuario usuario, List<Contribuicao> contribuicoes) {
        int mesesContribuidosAteReforma = calcularMesesContribuidosAteData(contribuicoes, DATA_REFORMA);

        // üö® Bloqueia se tiver contribui√ß√µes ap√≥s a reforma
        boolean contribuiuDepoisDaReforma = contribuicoes.stream()
                .anyMatch(c -> c.getPeriodoInicio().isAfter(DATA_REFORMA));

        if (contribuiuDepoisDaReforma) {
            return false; // üö´ Fora da regra
        }

        int anosContribuidosAteReforma = mesesContribuidosAteReforma / 12;
        int minimoContribuicao = (usuario.getGenero() == Usuario.Genero.MASCULINO) ? 35 : 30;

        // ‚úÖ Eleg√≠vel se contribuiu antes da reforma, mas n√£o atingiu o m√≠nimo de anos
        return anosContribuidosAteReforma < minimoContribuicao;
    }

    /**
     * Calcula o total de meses de contribui√ß√£o do usu√°rio at√© uma determinada data.
     */
    private int calcularMesesContribuidosAteData(List<Contribuicao> contribuicoes, LocalDate dataLimite) {
        return contribuicoes.stream()
                .filter(c -> c.getPeriodoInicio().isBefore(dataLimite))
                .mapToInt(c -> {
                    LocalDate inicio = c.getPeriodoInicio();
                    LocalDate fim = c.getPeriodoFim().isBefore(dataLimite) ? c.getPeriodoFim() : dataLimite;
                    return (int) ChronoUnit.MONTHS.between(inicio, fim);
                })
                .sum();
    }

    /**
     * Calcula a m√©dia salarial das contribui√ß√µes do usu√°rio considerando apenas os sal√°rios desde julho de 1994.
     */
    private double calcularMediaContribuicoesDesde1994(List<Contribuicao> contribuicoes) {
        double somaSalarios = 0.0;
        int totalMeses = 0;

        for (Contribuicao c : contribuicoes) {
            // Verificar se a contribui√ß√£o deve ser considerada (se inicia ap√≥s 1994)
            if (!c.getPeriodoInicio().isBefore(DATA_CORTE_1994)) {
                long meses = ChronoUnit.MONTHS.between(c.getPeriodoInicio(), c.getPeriodoFim());
                somaSalarios += c.getValorSalario() * meses;
                totalMeses += meses;
            }
        }

        return (totalMeses > 0) ? (somaSalarios / totalMeses) : 0.0;
    }

    /**
     * Calcula o fator previdenci√°rio com base no tempo de contribui√ß√£o e expectativa de vida.
     */
    private double calcularFatorPrevidenciario(int anosContribuidos, double expectativaVida) {
        double fator = (anosContribuidos * ALIQUOTA_FIXA) / expectativaVida;
        return Math.max(0.6, fator); // ‚úÖ Mant√©m um m√≠nimo de 60%
    }
}
